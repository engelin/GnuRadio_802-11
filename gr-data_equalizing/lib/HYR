/* -*- c++ -*- */
/* 
 * Copyright 2016 <+YOU OR YOUR COMPANY+>.
 * 
 * This is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 * 
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <gnuradio/io_signature.h>
#include "HYR_ofdm_impl.h"


namespace gr {
  namespace data_equalizing {

    HYR_ofdm::sptr
    HYR_ofdm::make()
    {
      return gnuradio::get_initial_sptr
        (new HYR_ofdm_impl());
    }

    /*
     * The private constructor
     */
    HYR_ofdm_impl::HYR_ofdm_impl()
      : gr::block("HYR_ofdm",
              gr::io_signature::make(1, 1, 64*sizeof(gr_complex)),
              gr::io_signature::make(1, 1, 64*sizeof(gr_complex)))
    {
       this->d_nsym=0;
       this->f_mac=0;
    }

    /*
     * Our virtual destructor.
     */
    HYR_ofdm_impl::~HYR_ofdm_impl()
    {
    }


/*
    void
    HYR_ofdm_impl::equalizer(gr_complex *in, gr_complex *out, int n) {
       gr_complex polarity[127] = {
                 1, 1, 1, 1,-1,-1,-1, 1,-1,-1,-1,-1, 1, 1,-1, 1,
                -1,-1, 1, 1,-1, 1, 1,-1, 1, 1, 1, 1, 1, 1,-1, 1,
                 1, 1,-1, 1, 1,-1,-1, 1, 1, 1,-1, 1,-1,-1,-1, 1,
                -1, 1,-1,-1, 1,-1,-1, 1, 1, 1, 1, 1,-1,-1, 1, 1,
                -1,-1, 1,-1, 1,-1, 1, 1,-1,-1,-1, 1, 1,-1,-1,-1,
                -1, 1,-1,-1, 1,-1, 1, 1, 1, 1,-1, 1,-1, 1,-1, 1,
                -1,-1,-1,-1,-1, 1,-1, 1, 1,-1, 1,-1, 1, 1, 1,-1,
                -1, 1,-1,-1,-1, 1, 1, 1,-1,-1,-1,-1,-1,-1,-1 };

      double avg_mag = (abs(in[11]) + abs(in[25]) + abs(in[39]) + abs(in[53])) / 4;

      gr_complex p = polarity[(n - 2) % 127];

      double p1 = arg( p * in[11]);
      double p2 = arg( p * in[25] * conj(p * in[11])) + p1;
      double p3 = arg( p * in[39] * conj(p * in[25])) + p2;
      double p4 = arg(-p * in[53] * conj(p * in[39])) + p3;

      double my = (p1 + p2 + p3 + p4) / 4;
      double mx = (11.0 + 25 + 39 + 53) / 4;

      double var = (((11.0 * 11.0) + (25.0 * 25.0) + (39.0 * 39.0) + (53.0 * 53.0)) / 4) - (mx * mx);
      double cov =  (( (p1 * 11) + (p2 * 25) + (p3 * 39) + (p4 * 53) ) / 4) - (mx * my);
      double beta = cov / var;
      double alpha = my - beta * mx;

      int c = 0;
      for(int n = 0; n < 64; n++) {
        if( (n == 11) || (n == 25) || (n == 32) || (n == 39) || (n == 53) || (n < 6) || ( n > 58)) {
          continue;
        }
        else {
          out[c] = in[n] * exp(gr_complex(0, -n * beta - alpha)) * gr_complex(1 / avg_mag, 0);
          c++;
        }
      }
    }

    void
    HYR_ofdm_impl::sig_demodulator(gr_complex *in, char *out) {
       double bits[48];
       for(int n = 0; n < 48; n++) {
          bits[n] = std::real(in[n]);
          if(bits[n] < 0) {
             out[n] = 0;
          }
          else if (bits[n] >= 0) {
             out[n] =1;
          }
       }
    }

    void
    HYR_ofdm_impl::sig_deinterleaver(char *in, char *out) {
       double temp[48];
       int inter[48] = {0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,1,4,7,10,13,16,19,22,25,28,31,34,37,40,43,46,2,5,8,11,14,17,20,23,26,29,32,35,38,41,44,47};

       for(int i = 0; i < 48; i++) {
         temp[i] = in[inter[i]];
       }
       for(int i = 0; i < 48; i++) {
         out[i] = temp[i];
       }
    }

    void
    HYR_ofdm_impl::Binary2Decimal(unsigned char *binary, unsigned int *decimal, unsigned char bit ) {
       unsigned int dec = 0;
       unsigned int t;
       int i;

       for (i = bit - 1, t = 0; i >= 0; i--, t++) {
         dec |= binary[i] << t;
       }
       *decimal = dec;
    }

    void
    HYR_ofdm_impl::Decimal2Binary(unsigned int decimal, unsigned char *binary, unsigned char bit) {
       unsigned int t = 1;
       int i;

       for (i = 0; i < bit - 1; i++) {
         t = t << 1;
       }

       while (t > 0) {
         *(binary++) = (unsigned char)(decimal/t);
         decimal %= t;
         t /= 2;
       }
    }

    unsigned char
    HYR_ofdm_impl::Modular2Adder(unsigned char *src, unsigned int idx) {
       unsigned char matrix_add[N][M+L] = {{1, 0, 1, 1, 0, 1, 1}, {1, 1, 1, 1, 0, 0, 1}};//generator

       int i;
       unsigned char result = 0;

       for (i = 0; i < L + M; i++) {
         result = result ^ (src[i] & matrix_add[idx][i]);
       }

       return result&0x01;
    }

    int
    HYR_ofdm_impl::viterbi(unsigned char *code, unsigned char *stream) {
       unsigned int trellis[POW_2_L][STAGE+1] = {0, };
       unsigned int trellis_back[POW_2_L][STAGE+1] = {0, };
       unsigned int trellis_path[STAGE] = {0, };
       unsigned int bit_check;
       unsigned char *binary_code;
       unsigned int max_trellis = 0;
       unsigned int idx_max_trellis;
       unsigned int t, tt;
       int i, j, v, idx, t_trellis;

       bit_check = POW_2_L - 1;

       //calculate trellis value
       for (i = 0; i < STAGE; i++, bit_check = bit_check >> M) {
          binary_code = code + (i*N);
          for (j = 0; j < POW_2_L; j++) {

          if(j & bit_check) continue;

           for (v = 0; v < POW_2_M; v++) {
             t = next_state[j][v];
             tt = j | (v << L);

             for (idx = 0, t_trellis = 0; idx < N; idx++) {
               t_trellis += binary_code[idx] == stream_2_code[tt][idx];
             }

             if(trellis[t][i+1] < trellis[j][i] + t_trellis) {
               trellis[t][i+1] = trellis[j][i] + t_trellis;
               trellis_back[t][i+1] = j;
             }
           }
         }
       }

       //fine trellis path
       max_trellis = 0;
       for (i = 0; i < POW_2_L; i++) {
         if(max_trellis < trellis[i][STAGE]) {
           max_trellis = trellis[i][STAGE];
           idx_max_trellis = i;
         }
       }

       for (i = STAGE - 1; i >= 0; i -= 1) {
         trellis_path[i] = idx_max_trellis;
         j = idx_max_trellis >> (L - M);
         Decimal2Binary(j, stream+(i*M), M);

         idx_max_trellis = trellis_back[trellis_path[i]][i+1];
       }

       return ROK;
    }

    void
    HYR_ofdm_impl::sig_viterbi_decoder(char *in, char *out) {
       unsigned char code[LEN_CODE] = {0, };
       unsigned char stream[K] = {0, };
       unsigned char bin_i[L+M];
       int ret = ROK;
       int i, j;
       unsigned int t;

       //pre processing
       for (i = 0; i < POW_2_L * POW_2_M; i++) {
         Decimal2Binary(i, bin_i, L+M);
         for (j = 0; j < N; j++) {
           stream_2_code[i][j] = Modular2Adder(bin_i, j);
         }
       }

       for (i = 0; i < POW_2_L; i++) {
         for (j = 0; j < POW_2_M; j++) {
           t = i >> M;
           t |= (j << (L-M));
           next_state[i][j] = t;
         }
       }

       for (i = 0; i < LEN_CODE; i++) {
         code[i] = in[i];
       }

       ret = viterbi(code, stream);

       if (ret == ROK) {
         for (i = 0; i < K; i++) {
           out[i] = stream[i];
         }
       }
    }

    bool
    HYR_ofdm_impl::print_signal(char *in, int d_len, int d_encoding, int d_copy_symbols) {
       int r = 0;
       d_len = 0;
       bool parity = false;
       for(int i = 0; i < 17; i++) {
          parity ^= (bool)in[i];

          if((i < 4) && in[i]) {
             r = r | (1 << i);
          }

          if(in[i] && (i > 4) && (i < 17)) {
             d_len = d_len | (1 << (i-5));
          }
       }
   
       if(parity != (bool)in[17]) {
          std::cout << "SIGNAL: wrong parity" << std::endl;
          return false;
       }

       if(r == 11) {
          d_encoding = 0;
          d_copy_symbols = (int) ceil((16 + 8 * d_len + 6) / (double) 24);
          std::cout << "Encoding: 3 Mbit/s   ";
       }
       else if(r == 15) {
          d_encoding = 1;
          d_copy_symbols = (int) ceil((16 + 8 * d_len + 6) / (double) 36);
          std::cout << "Encoding: 4.5 Mbit/s   ";
       }
       else if(r == 10) {
          d_encoding = 2;
          d_copy_symbols = (int) ceil((16 + 8 * d_len + 6) / (double) 48);
          std::cout << "Encoding: 6 Mbit/s   ";
       }
       else if(r == 14) {
          d_encoding = 3;
          d_copy_symbols = (int) ceil((16 + 8 * d_len + 6) / (double) 72);
          std::cout << "Encoding: 9 Mbit/s   ";
       }
       else if(r ==  9) {
          d_encoding = 4;
          d_copy_symbols = (int) ceil((16 + 8 * d_len + 6) / (double) 96);
          std::cout << "Encoding: 12 Mbit/s   ";
       }
       else if(r == 13) {
          d_encoding = 5;
          d_copy_symbols = (int) ceil((16 + 8 * d_len + 6) / (double) 144);
          std::cout << "Encoding: 18 Mbit/s   ";
       }
       else if(r ==  8) {
          d_encoding = 6;
          d_copy_symbols = (int) ceil((16 + 8 * d_len + 6) / (double) 192);
          std::cout << "Encoding: 24 Mbit/s   ";
       }
       else if(r ==  12) {
          d_encoding = 7;
          d_copy_symbols = (int) ceil((16 + 8 * d_len + 6) / (double) 216);
          std::cout << "Encoding: 27 Mbit/s   ";
       }
       else {
          std::cout << "unknown encoding" << std::endl;
          return false;
       }
       return true;
    }
*/

    void
    HYR_ofdm_impl::forecast (int noutput_items, gr_vector_int &ninput_items_required)
    {
        /* <+forecast+> e.g. ninput_items_required[0] = noutput_items */
    }

    int
    HYR_ofdm_impl::general_work (int noutput_items,
                       gr_vector_int &ninput_items,
                       gr_vector_const_void_star &input_items,
                       gr_vector_void_star &output_items)
    {
	//gr::thread::scoped_lock lock(d_mutex);

        const gr_complex *in = (const gr_complex *) input_items[0];
        gr_complex *out = (gr_complex *) output_items[0];

	int i = 0;
        int o = 0;

        std::vector<gr::tag_t> tags;
	const uint64_t nread = nitems_read(0);

	//std::cout << "SYMBOLS: input " << ninput_items[0] << " output " << noutput_items << std::endl;

        while((i < ninput_items[0])/* && o < noutput_items*/) {
           get_tags_in_window(tags, 0, i, i + 1, pmt::string_to_symbol("ofdm_start"));

           if(tags.size()) {
	      std::cout << "nsym : " << this->d_nsym << std::endl;
              this->d_nsym = 0;
	      //std::cout << ninput_items[0] << " in.." << std::endl;
           }

           gr_complex eq_out[48];
           if(d_nsym > 1) {
              //channel equalizing
              equalizer((gr_complex*)in, eq_out, d_nsym);

              /*//signal field decoding
              if(d_nsym == 2) {
                 char sig_dem_out[48];
                 char sig_deinter_out[48];
                 char sig_deconv_out[24];

                 sig_demodulator(eq_out, sig_dem_out);
                 sig_deinterleaver(sig_dem_out, sig_deinter_out);
                 sig_viterbi_decoder(sig_deinter_out, sig_deconv_out);

                 if(print_signal(sig_deconv_out, d_mac_len, d_mac_encoding, d_mac_symbols)) {
                    //////
                 }
              }*/
           }

	   //signal field decoding
/*	   if(d_nsym == 2) {
	      char sig_dem_out[48];
	      char sig_deinter_out[48];
	      char sig_deconv_out[48];

	      sig_demodulator(eq_out, sig_dem_out);
              sig_deinterleaver(sig_dem_out, sig_deinter_out);
              sig_viterbi_decoder(sig_deinter_out, sig_deconv_out);

              if(print_signal(sig_deconv_out, d_mac_len, d_mac_encoding, d_mac_symbols)) {
		    if((d_mac_symbols <= MAX_SYM)) {
                       //data decoding on
		       f_mac = 1;
		    }
              }
	   }

	   //if((d_nsym > 2) && (d_nsym < 2 + d_mac_symbols + 1) && (f_mac == 1)) {
	   if(copied < d_mac_symbols) {
	      //data symbols copy
	      std::memcpy(sym + (copied * 48), in, 48*sizeof(gr_complex));
	      copied++;

	      if(copied == d_mac_symbols) {
	        //data decoding start
		//decoding...
		

		//data decoding off
		f_mac = 0;
	      }
	   }
*/
	   in += 64;
	   i++;
	   this->d_nsym++;
        }


        // Do <+signal processing+>
        // Tell runtime system how many input items we consumed on
        // each input stream.
        consume(0, i);

        // Tell runtime system how many output items we produced.
        return noutput_items;
    }

  } /* namespace data_equalizing */
} /* namespace gr */

